# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# create_ini_settings.rb
#
# ---- original file header ----
#
# @summary
#       @return [String] Returns a string.
#    create_resources is used to create a set of ini_setting resources from a hash
#
#
Puppet::Functions.create_function(:'inifile::create_ini_settings') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end

  def default_impl(*arguments)
    unless arguments.size.between?(1, 2)
      raise(Puppet::ParseError, _('create_ini_settings(): Wrong number of arguments ' \
        'given (%{arguments_size} for 1 or 2)') % { arguments_size: arguments.size })
    end

    settings = arguments[0]
    defaults = arguments[1] || {}

    if [settings, defaults].any? { |i| !i.is_a?(Hash) }
      raise(Puppet::ParseError,
            _('create_ini_settings(): Requires all arguments to be a Hash'))
    end

    resources = settings.keys.each_with_object({}) do |section, res|
      unless settings[section].is_a?(Hash)
        raise(Puppet::ParseError,
              _('create_ini_settings(): Section %{section} must contain a Hash') % { section: section })
      end

      path = defaults.merge(settings)['path']
      raise Puppet::ParseError, _('create_ini_settings(): must pass the path parameter to the Ini_setting resource!') unless path

      settings[section].each do |setting, value|
        res["#{path} [#{section}] #{setting}"] = {
          'ensure'  => 'present',
          'section' => section,
          'setting' => setting,
        }.merge(if value.is_a?(Hash)
                  value
                else
                  { 'value' => value }
                end)
      end
    end

    Puppet::Parser::Functions.function('create_resources')
    function_create_resources(['ini_setting', resources, defaults])
  end
end
